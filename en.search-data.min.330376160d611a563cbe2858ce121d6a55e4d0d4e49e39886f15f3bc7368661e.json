[{"id":0,"href":"/software-quality/project-lifecycle/requirements-gathering/","title":"Requirements Gathering","section":"Project Lifecycle","content":" Identify who the customers are Understand what they do, and what they need Understand how they will use the system and what they expect Identify a list of \u0026ldquo;key approvers\u0026rdquo; (individual humans, not teams) Propose and get approval on: A summary of the problem the project will solve A list of concrete, measurable goals for the project to achieve A list of things the project will NOT achieve (\u0026ldquo;out of scope\u0026rdquo;) "},{"id":1,"href":"/software-quality/project-lifecycle/design/","title":"Design","section":"Project Lifecycle","content":" Reference the requirements you are trying to meet Lay out the logical \u0026ldquo;components\u0026rdquo; and describe how they will work together Specify the inner function of each component You can delegate this to sub-designs with more technically-focused requirements Specify what technical decisions were made and why Address cross-cutting concerns (operations, security, extensibility) Provide a breakdown of the needed work, with estimates of how much engineer time each step will take Get all the way down to individual tasks, even if it means making sub-designs Get approval from all people and teams who will probably be involved in the work "},{"id":2,"href":"/software-quality/project-lifecycle/planning/","title":"Planning","section":"Project Lifecycle","content":" Break the plan down into independent \u0026ldquo;workstreams\u0026rdquo; Decide who will work on each workstream Break down each workstream into a sequence of \u0026ldquo;milestones\u0026rdquo; with clear deliverables Determine when each milestone will be done by Identify risks to the plan, and add buffer time or resources Get approval from management, and the people who will work on this "},{"id":3,"href":"/software-quality/project-lifecycle/implementation/","title":"Implementation","section":"Project Lifecycle","content":" Write code Ensure sufficient testing and documentation as you go Ensure all code and documentation is reviewed Check your progress against requirements periodically You should demo the product to key approvers periodically Adjust the roadmap or design as needed Decide you are ready to release the new system! "},{"id":4,"href":"/software-quality/project-lifecycle/release/","title":"Release","section":"Project Lifecycle","content":" Get Customer Approval Complete Operations, Security and Privacy Checklists To the extent possible, these should be automated Not all checklist items are always relevant Define a release plan How will we execute the release? What could go wrong? What will we do about it? Get approval on the artifacts above Execute the release plan "},{"id":5,"href":"/software-quality/project-lifecycle/operation/","title":"Operation","section":"Project Lifecycle","content":" Monitor the system, manage an on-call rotation Mitigate incidents, if applicable Address customer feedback Fix bugs Plan improvements (these also follow the same lifecycle) Determine if the system needs to be deprecated (usually as part of a new project) "},{"id":6,"href":"/software-quality/project-lifecycle/deprecation/","title":"Deprecation","section":"Project Lifecycle","content":" Identify and measure impact of all affected customer use cases Identify any actions needed to migrate customers to a new system Make an inventory of all the components that need to be decommissioned Perform any needed migrations Shut down the system "},{"id":7,"href":"/software-quality/standards/design-template/","title":"Design Template","section":"Standards","content":" Instructions # Replace italicized items like {your name here} Follow instructions in any big red banners like this one Review the document yourself to verify you\u0026rsquo;ve followed instructions Delete all of the red banners and any leftover notes [Design] {Project Name Here} # Author: {Author1, Author2} Status: {Draft/Approved} Pick the people who need to approve this design. You could reasonably include:\nExperts on the systems that need to be changed People who are planning to work on this Senior engineers Key points of contact from teams who will also work on this Product managers (tech or not), to approve on behalf of customers Reviewers are allowed to ask for more reviewers - that\u0026rsquo;s why this table is here.\nKey Approver Representing Status Notes {approver1} {team/org/system} {Pending/Approved} {comments go here} {approver2} {team/org/system} {Pending/Approved} {comments go here} {approver3} {team/org/system} {Pending/Approved} {comments go here} Requirements # This section sets the \u0026ldquo;definition of done\u0026rdquo;. No content is needed under this header.\nIt is reasonable to ensure the requirements are reviewed by some of your stakeholders BEFORE you write the design. This helps make sure you\u0026rsquo;re designing for the right problem.\nYou could go so far as to split this into its own separate doc, and just reference the requirements doc when you write the design portion.\nProblem Statement # Write a plain-language paragraph or two to explains:\nWho the customer is What they do and what problem they have A vision for what \u0026ldquo;solved\u0026rdquo; looks like The customer could be your business\u0026rsquo; end-customer, another business, a set of internal teams or even your own team. You can address multiple customers if needed.\nFunctional Requirements # Write a numbered bulleted list of \u0026ldquo;requirements\u0026rdquo;. These are concrete, measurable goals you can easily see if you\u0026rsquo;ve reached or not. These have to be done for the project to be considered done.\nFunctional requirements focus on \u0026ldquo;functionality we will provide\u0026rdquo;. Examples:\nThe customer can click on the \u0026ldquo;hello\u0026rdquo; button to receive a \u0026ldquo;hello\u0026rdquo; email All filed customer complaints will be stored permanently I can send an emoji with a format like :happyface: The breadth or focus of ALL requirements depends on the breadth or focus of the project.\nIf the whole goal of the project is to improve non-functional requirements, those can be listed here and you can remove the non-functional requirements section.\nNon-Functional Requirements # Write a numbered bulleted list of \u0026ldquo;requirements\u0026rdquo;. These are concrete, measurable goals you can easily see if you\u0026rsquo;ve reached or not. These have to be done for the project to be considered done.\nNon-functional requirements focus on \u0026ldquo;how we will provide our functionality\u0026rdquo;. Examples:\nThe \u0026ldquo;create\u0026rdquo; operation will meet a latency SLA of 5ms @ P95 The \u0026ldquo;create\u0026rdquo; operation will handle 90 QPS without performance degradation No engineer effort should be required for a customer to file a complaint This project will meet all operations, security and privacy standards of our org The breadth or focus of ALL requirements depends on the breadth or focus of the project.\nOut of Scope # Write a numbered bulleted list of \u0026ldquo;NON-requirements\u0026rdquo;. These are things this project will NOT achieve. You write these down to prevent people from asking \u0026ldquo;wait, this doesn\u0026rsquo;t solve X?\u0026rdquo; Proposal # This section specifies at a high level our solution to the problem.\nAvoid getting into fine details until later.\nOverview # Provide a diagram that shows the components of your system, as well as any neighboring systems it interacts with.\nColor scheme should be used to show:\nWhich components need changes Which components are new Which components will be deprecated Which components will be unaffected (\u0026ldquo;out of scope\u0026rdquo;) Components # For each component, describe:\nSummary of its purpose, how it works and how it interacts with other components Its API \u0026ndash; inputs, outputs, side-effects High level logic behind the API You want a digestible amount of detail here. Don\u0026rsquo;t go too deep.\n{Component 1} # {Component 2} # {Component 3} # Alternatives # Explain what alternative approaches you considered.\nIf there were multiple choices on a certain component, you could make one section explaining those choices, and the tradeoffs that led you to your decision.\nThis is where you really show your work, and the thought process you followed.\n{Why Not X?} # {Why Not Y?} # Detailed Notes # This section makes an inventory of applicable standards, and explains how we will meet all of them with the proposed design.\nNote that there might be finer details here that were not covered in the proposal section.\nI often hold off on writing all of the detailed notes until I\u0026rsquo;m confident in my proposal \u0026ndash; otherwise you\u0026rsquo;ll have to revise these when one of your alternatives is found to be preferred.\nRelease Process # Operations # Security # Privacy # {Component 1 Deep-Dive} # Not all components need a full deep-dive, but it can be helpful in case you don\u0026rsquo;t want to create a whole new design doc just for that component / there isn\u0026rsquo;t quite enough ambiguity for that. "},{"id":8,"href":"/software-quality/project-lifecycle/","title":"Project Lifecycle","section":"","content":" Lifecycle of a Software Project # Each section below describes one phase of a software project.\nRequirements Gathering Decide what problem we\u0026rsquo;re going to solve, and what \u0026ldquo;solved\u0026rdquo; means. Design Decide how we will meet all of the requirements. Planning Decide who will execute the approved plan, by when. Implementation Develop the proposed software. Release Ensure the system is ready for release and meets all applicable standards. Operation Operate, fix and improve the system. Deprecation Decommission or replace the system when it becomes obsolete. "},{"id":9,"href":"/software-quality/standards/","title":"Standards","section":"","content":" Standards # Each of the items below is a standard. A standard is either a document template or a checklist, which provides a pre-built structure for you to follow.\nDesign Template A design doc template you can fill in to easily create a comprehensive design. "}]